const fs = require('fs');

const get_data = () => JSON.parse(fs.readFileSync('data.json', 'utf8'));
const save_data = data => fs.writeFileSync('data.json', JSON.stringify(data));

const handle_admin_message = async ctx => {
    let data = get_data();
    if ('text' in ctx.message) {
        let text = ctx.message.text;
        console.log(text);
        if (text == '/start') {
            let reply_text =
                'üëã –¢—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\\.\n' +
                '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É';
            let keyboard = [
                [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:back'} ],
                [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:back' } ]
            ];
            if (data.faq) {
                keyboard.push([
                    { text: '‚ÑπÔ∏è FAQ', callback_data: 'faq' }
                ]);
            }
            if (data.access.length) {
                keyboard.unshift([
                    { text: 'üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø', callback_data: 'private_access' }
                ]);
            }
            ctx.reply(reply_text, {
                parse_mode: 'MarkdownV2',
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } else if (text.slice(0, 4) == '/faq') {
            let [, ...faq_text] = text.split('\n');
            if (!faq_text.length) {
                data.faq = '';
                save_data(data);
                let reply_text =
                    '‚ÑπÔ∏è –¢–µ–∫—Å—Ç FAQ —É–¥–∞–ª—ë–Ω';
                ctx.reply(reply_text);
            } else {
                faq_text = faq_text.join('\n');
                data.faq = faq_text;
                save_data(data);
                let reply_text =
                    '‚ÑπÔ∏è –¢–µ–∫—Å—Ç FAQ –æ–±–Ω–æ–≤–ª—ë–Ω';
                ctx.reply(reply_text);
            }
        } else if (text.slice(0, 12) == '/add_webinar') {
            let [, name, price, ...description] = text.split('\n');
            if (!name || !price || !description) {
                let reply_text =
                    '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            } else if (isNaN(price) || parseFloat(price) != parseInt(price)) {
                let reply_text =
                    '‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–µ–±–∏–Ω–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            } else {
                data.webinars.push({
                    uid: ++data.last_uid,
                    name: name,
                    image: null,
                    price: parseInt(price),
                    description: description.join('\n'),
                    materials: []
                });
                save_data(data);
                let reply_text =
                    '‚úÖ –í–µ–±–∏–Ω–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:menu'} ],
                        ]
                    }
                });
            }
        } else if (text.slice(0, 13) == '/add_material') {
            let reply_text =
                '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É/–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é';
            ctx.reply(reply_text, {
                reply_markup: {
                    inline_keyboard: [
                        [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                    ]
                }
            });
        } else if (text.slice(0, 15) == '/remove_webinar') {
            if (!text.split(' ').length || text.split('\n').length > 1) {
                let reply_text =
                    '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            } else {
                let webinar_name = text.split(' ').slice(1).join(' ')
                let webinar = data.webinars.find(w => w.name == webinar_name);
                if (webinar) {
                    data.webinars = data.webinars.filter(w => w.name != webinar_name);
                    save_data(data);
                    let reply_text =
                        '‚úÖ –í–µ–±–∏–Ω–∞—Ä —É–¥–∞–ª—ë–Ω';
                    ctx.reply(reply_text, {
                        reply_markup: {
                            inline_keyboard: [
                                [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:menu' } ]
                            ]
                        }
                    });
                } else {
                    let reply_text =
                        '‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤–µ–±–∏–Ω–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º';
                    ctx.reply(reply_text, {
                        reply_markup: {
                            inline_keyboard: [
                                [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:menu' } ]
                            ]
                        }
                    });
                }
            }
        } else if (text.slice(0, 16) == '/remove_material') {
            let [, webinar_name, material_name] = text.split('\n');
            if (!webinar_name || !material_name) {
                let reply_text =
                    '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            } else {
                let webinar = data.webinars.find(w => w.name == webinar_name);
                if (webinar) {
                    let material = webinar.materials.find(m => m.name);
                    if (material) {
                        webinar.materials = webinar.materials.filter(m => m.name != material_name);
                        save_data(data);
                        let reply_text =
                            '‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª—ë–Ω';
                        ctx.reply(reply_text, {
                            reply_markup: {
                                inline_keyboard: [
                                    [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:menu' } ]
                                ]
                            }
                        });
                    } else {
                        let reply_text =
                            '‚ùå –í —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–µ–±–∏–Ω–∞—Ä–µ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º';
                        ctx.reply(reply_text, {
                            reply_markup: {
                                inline_keyboard: [
                                    [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:menu' } ]
                                ]
                            }
                        });
                    }
                } else {
                    let reply_text =
                        '‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤–µ–±–∏–Ω–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º';
                    ctx.reply(reply_text, {
                        reply_markup: {
                            inline_keyboard: [
                                [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:menu' } ]
                            ]
                        }
                    });
                }
            }
        } else if (text.slice(0, 12) == '/add_channel') {
            let [, chat_id, name, price_per_day ] = text.split('\n');
            if (data.access.find(chat => chat.chat_id == chat_id)) {
                ctx.reply('‚ùå–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª');
            } else if (!price_per_day || isNaN(price_per_day)) {
                ctx.reply('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
            } else {
                let chat;
                try {
                    chat = await ctx.telegram.getChat(chat_id);
                } catch(e) {}
                if (!chat) {
                    ctx.reply('‚ùå –ú–µ–Ω—è –Ω–µ—Ç –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ');
                } else if (chat.type != 'channel') {
                    ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª');
                } else {
                    data.access.push({
                        type: 'channel',
                        chat_id,
                        name,
                        price_per_day
                    });
                    save_data(data);
                    let reply_text =
                        '‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω';
                    ctx.reply(reply_text);
                }
            }
        } else if (text.slice(0, 10) == '/add_group') {
            let [, chat_id, name, price_per_day ] = text.split('\n');
            if (data.access.find(chat => chat.chat_id == chat_id)) {
                ctx.reply('‚ùå–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç—É –≥—Ä—É–ø–ø—É');
            } else if (!price_per_day || isNaN(price_per_day)) {
                ctx.reply('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
            } else {
                let chat;
                try {
                    chat = await ctx.telegram.getChat(chat_id);
                } catch(e) {}
                if (!chat) {
                    ctx.reply('‚ùå –ú–µ–Ω—è –Ω–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ');
                } else if (chat.type != 'supergroup') {
                    ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞');
                } else {
                    data.access.push({
                        type: 'group',
                        chat_id,
                        name,
                        price_per_day
                    });
                    save_data(data);
                    let reply_text =
                        '‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω';
                    ctx.reply(reply_text);
                }
            }
        } else if (text.slice(0, 15) == '/remove_channel') {
            let [, ...name] = text.split(' ');
	    name = name.join(' ');
            if (data.access.find(chat => chat.name == name)) {
                data.access = data.access.filter(chat => chat.name != name && chat.type == 'channel');
                save_data(data);
                ctx.reply('‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω'); 
            } else {
                ctx.reply('‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª');
            }
        } else if (text.slice(0, 13) == '/remove_group') {
            let [, ...name] = text.split(' ');
	    name = name.join(' ');
            if (data.access.find(chat => chat.name == name)) {
                data.access = data.access.filter(chat => chat.name != name && chat.type == 'group');
                save_data(data);
                ctx.reply('‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞'); 
            } else {
                ctx.reply('‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç—É –≥—Ä—É–ø–ø—É');
            }
        } else if (text.slice(0, 1) == '/') {
            let reply_text =
                '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
            ctx.reply(reply_text, {
                reply_markup: {
                    inline_keyboard: [
                        [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                    ]
                }
            });
        }
    } else if ('caption' in ctx.message) {
        let caption = ctx.message.caption;
        console.log(caption);
        if (caption.slice(0, 12) == '/add_webinar') {
            let [, name, price, ...description] = caption.split('\n');
            if (!name || !price || !description) {
                let reply_text =
                    '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            } else if (isNaN(price) || parseFloat(price) != parseInt(price)) {
                let reply_text =
                    '‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–µ–±–∏–Ω–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            } else {
                data.webinars.push({
                    uid: ++data.last_uid,
                    name: name,
                    image: ctx.message.photo ? ctx.message.photo[0].file_id : null,
                    price: parseInt(price),
                    description: description.join('\n'),
                    materials: []
                });
                save_data(data);
                let reply_text =
                    '‚úÖ –í–µ–±–∏–Ω–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:menu'} ],
                        ]
                    }
                });
            }
        } else if (caption.slice(0, 13) == '/add_material') {
            if (!ctx.message.photo && !ctx.message.video && !ctx.message.document) {
                let reply_text =
                    '‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–µ–±–∏–Ω–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            }
            let [, webinar_name, material_name, ...description] = caption.split('\n');

            if (!webinar_name || !material_name) {
                let reply_text =
                    '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã';
                ctx.reply(reply_text, {
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                        ]
                    }
                });
            } else {
                let webinar = data.webinars.find(w => w.name == webinar_name);
                if (!webinar) {
                    let reply_text =
                        '‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤–µ–±–∏–Ω–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º';
                    ctx.reply(reply_text, {
                        reply_markup: {
                            inline_keyboard: [
                                [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:menu' } ]
                            ]
                        }
                    });
                } else {
                    let material = webinar.materials.find(m => m.name == material_name);
                    if (!material) {
                        webinar.materials.push({
                            name: material_name,
                            type: ctx.message.photo ? 'photo' : ctx.message.video ? 'video' : 'document',
                            media: ctx.message.photo ? ctx.message.photo[0].file_id :
                                ctx.message.video ? ctx.message.video.file_id :
                                ctx.message.document.file_id,
                            description: description.join('\n')
                        });
                        save_data(data);
                        let reply_text =
                            '‚úÖ –ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–µ–±–∏–Ω–∞—Ä';
                        ctx.reply(reply_text, {
                            reply_markup: {
                                inline_keyboard: [
                                    [ { text: 'üìí –í–µ–±–∏–Ω–∞—Ä', callback_data: 'webinar:' + webinar.uid } ]
                                ]
                            }
                        });
                    } else {
                        material.type = ctx.message.photo ? 'photo' : ctx.message.video ? 'video' : 'document';
                        material.media = ctx.message.photo ? ctx.message.photo[0].file_id :
                            ctx.message.video ? ctx.message.video.file_id :
                            ctx.message.document.file_id;
                        material.description = description.join('\n');
                        save_data(data);
                        let reply_text =
                            '‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –≤ –≤–µ–±–∏–Ω–∞—Ä–µ –∏–∑–º–µ–Ω—ë–Ω';
                        ctx.reply(reply_text, {
                            reply_markup: {
                                inline_keyboard: [
                                    [ { text: 'üìí –í–µ–±–∏–Ω–∞—Ä', callback_data: 'webinar:' + webinar.uid } ]
                                ]
                            }
                        });
                    }
                }
            }
        }
    }
}

module.exports = handle_admin_message;
