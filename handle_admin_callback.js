const fs = require('fs');
const md = require('./md_friendly');

const get_data = () => JSON.parse(fs.readFileSync('data.json', 'utf8'));
// const save_data = data => fs.writeFileSync('data.json', JSON.stringify(data));

const COMMANDS_MESSAGE_TEXT =
    'üõ† *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n' +
    '\n' +
    '*/start* \\- –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n' +
    '\n' +
    '*/add\\_webinar* \\- –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±–∏–Ω–∞—Ä–∞\\. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å *_–Ω–∞–∑–≤–∞–Ω–∏–µ_* –≤–µ–±–∏–Ω–∞—Ä–∞, –µ–≥–æ *_—Å—Ç–æ–∏–º–æ—Å—Ç—å_* –∏ *_–æ–ø–∏—Å–∞–Ω–∏–µ_*\\.  –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å *_–∫–∞—Ä—Ç–∏–Ω–∫—É_*\\.\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
    '\n' +
    '```\n' +
    '/add\\_webinar\n' +
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä\n' +
    '999\n' +
    '–ò –∫–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —á–∞—Å—Ç—å—é –æ–ø–∏—Å–∞–Ω–∏—è "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≤–µ–±–∏–Ω–∞—Ä–∞"\\.\n' +
    '```\n' +
    '*/add\\_material* \\- –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ \\(—É—Ä–æ–∫–∞\\) –≤ –≤–µ–±–∏–Ω–∞—Ä\\. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å *_–Ω–∞–∑–≤–∞–Ω–∏–µ_* –≤–µ–±–∏–Ω–∞—Ä–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª, *_–Ω–∞–∑–≤–∞–Ω–∏–µ_* —Å–∞–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–ª–∞ \\(—Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ\\)\\. –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–ø–∏—Å–∞—Ç—å *_–æ–ø–∏—Å–∞–Ω–∏–µ_* –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–ª–∞\\. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å *_–∫–∞—Ä—Ç–∏–Ω–∫—É/–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ_*\\.\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
    '\n' +
    '```\n' +
    '/add\\_material\n' +
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä\n' +
    '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n' +
    '–í—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ \\- –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\\.\n' +
    '```\n' +
    '*/remove\\_webinar* \\- –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±–∏–Ω–∞—Ä–∞\\. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å *_–Ω–∞–∑–≤–∞–Ω–∏–µ_* –≤–µ–±–∏–Ω–∞—Ä–∞\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
    '\n' +
    '```\n' +
    '/remove_webinar –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä\n' +
    '```\n' +
    '*/remove\\_material* \\- –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ \\(—É—Ä–æ–∫–∞\\) –∏–∑ –≤–µ–±–∏–Ω–∞—Ä–∞\\. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å *_–Ω–∞–∑–≤–∞–Ω–∏–µ_* –≤–µ–±–∏–Ω–∞—Ä–∞ –∏ *_–Ω–∞–∑–≤–∞–Ω–∏–µ_* –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
    '\n' +
    '```\n' +
    '/remove_material\n' +
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä\n' +
    '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n' +
    '```\n';


const handle_callback = async ctx => {
    let [command, ...args] = ctx.update.callback_query.data.split(':');
    console.log(command, args);

    let data = get_data();
    if (command == 'private_group') {
        ctx.answerCbQuery('‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —ç—Ç–æ –º–µ–Ω—é –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    } else if (command == 'catalog') {
        let new_text =
            'üìÇ –ö–∞—Ç–∞–ª–æ–≥';
        let back_button_text;
        if (args[0] == 'back') back_button_text = 'üëà –ù–∞–∑–∞–¥';
        else back_button_text = 'üëà –ú–µ–Ω—é'
        let keyboard = [];
        for (let webinar of data.webinars) {
            keyboard.push([{
                text: webinar.name + ' (' + webinar.price + '—Ä.)',
                callback_data: 'webinar:' + webinar.uid
            }]);
        }
        keyboard.push([{
            text: back_button_text,
            callback_data: 'back:main'
        }]);
        ctx.editMessageText(new_text, {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } else if (command == 'commands') {
        let back_button_text;
        if (args[0] == 'back') back_button_text = 'üëà –ù–∞–∑–∞–¥';
        else back_button_text = 'üëà –ú–µ–Ω—é'
        ctx.editMessageText(COMMANDS_MESSAGE_TEXT, {
            parse_mode: 'MarkdownV2',
            reply_markup: {
                inline_keyboard: [
                    [ { text: back_button_text, callback_data: 'back:main' } ]
                ]
            }
        });
    } else if (command == 'back') {
        if (args[0] == 'main') {
            let new_text =
                'üëã –¢—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\\.\n' +
                '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É';
            if (ctx.update.callback_query.message.caption) {
                ctx.deleteMessage();
                ctx.reply(new_text, {
                    parse_mode: 'MarkdownV2',
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üîê –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', callback_data: 'private_group'} ],
                            [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:back'} ],
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:back' } ]
                        ]
                    }
                })
            } else {
                ctx.editMessageText(new_text, {
                    parse_mode: 'MarkdownV2',
                    reply_markup: {
                        inline_keyboard: [
                            [ { text: 'üîê –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', callback_data: 'private_group'} ],
                            [ { text: 'üìÇ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog:back'} ],
                            [ { text: 'üõ† –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands:back' } ]
                        ]
                    }
                });
            }
        } else if (args[0] == 'catalog') {
            let new_text =
                'üìÇ –ö–∞—Ç–∞–ª–æ–≥';
            let back_button_text;
            if (args[1] == 'back') back_button_text = 'üëà –ù–∞–∑–∞–¥';
            else if (args[1] == 'menu') back_button_text = 'üëà –ú–µ–Ω—é';
            else back_button_text = 'üëà –ù–∞–∑–∞–¥';
            let keyboard = [];
            for (let webinar of data.webinars) {
                keyboard.push([{
                    text: webinar.name + ' (' + webinar.price + '—Ä.)',
                    callback_data: 'webinar:' + webinar.uid
                }]);
            }
            keyboard.push([{
                text: back_button_text,
                callback_data: 'back:main'
            }]);
            if (ctx.update.callback_query.message.caption) {
                ctx.deleteMessage();
                ctx.reply(new_text, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                ctx.editMessageText(new_text, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }
        } else if (args[0] == 'webinar') {
            let webinar = data.webinars.find(w => w.uid == args[1]);
            if (!webinar) {
                ctx.deleteMessage();
                let reply_text =
                    '‚ùå –í–µ–±–∏–Ω–∞—Ä —É–¥–∞–ª—ë–Ω';
                ctx.reply(reply_text);
            } else {
                let new_text = 
                    '*' + md(webinar.name) + '* \\(' + webinar.price + '—Ä\\.\\)\n' +
                    (webinar.description ? '\n' + md(webinar.description) + '\n' : '');
                let keyboard = [];
                if (webinar.materials.length) {
                    for (let material in webinar.materials) {
                        keyboard.push([{
                            text: webinar.materials[material].name,
                            callback_data: 'material:' + webinar.uid + ':' + material
                        }]);
                    }
                } else {
                    new_text += '\n‚ùóÔ∏è –í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —ç—Ç–æ—Ç –≤–µ–±–∏–Ω–∞—Ä';
                }
                keyboard.push([{
                    text: 'üëà –ù–∞–∑–∞–¥',
                    callback_data: 'back:catalog'
                }]);
                if (webinar.image && ctx.update.callback_query.message.caption) {
                    ctx.editMessageMedia({
                        type: 'photo',
                        media: webinar.image,
                        caption: new_text
                    }, {
                        parse_mode: 'MarkdownV2',
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                } else {
                    ctx.deleteMessage();
                    ctx.reply(new_text, {
                        parse_mode: 'MarkdownV2',
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                }
            }
        }
    } else if (command == 'webinar') {
        let webinar = data.webinars.find(w => w.uid == args[0]);
        if (!webinar) {
            ctx.deleteMessage();
            let reply_text =
                '‚ùå –í–µ–±–∏–Ω–∞—Ä —É–¥–∞–ª—ë–Ω';
            ctx.reply(reply_text);
        } else {
            let new_text = 
                '*' + md(webinar.name) + '* \\(' + webinar.price + '—Ä\\.\\)\n' +
                (webinar.description ? '\n' + md(webinar.description) + '\n' : '');
            let keyboard = [];
            if (webinar.materials.length) {
                for (let material in webinar.materials) {
                    keyboard.push([{
                        text: webinar.materials[material].name,
                        callback_data: 'material:' + webinar.uid + ':' + material
                    }]);
                }
            } else {
                new_text += '\n‚ùóÔ∏è –í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —ç—Ç–æ—Ç –≤–µ–±–∏–Ω–∞—Ä';
            }
            keyboard.push([{
                text: 'üëà –ù–∞–∑–∞–¥',
                callback_data: 'back:catalog'
            }]);
            if (webinar.image) {
                ctx.deleteMessage();
                ctx.replyWithPhoto(webinar.image, {
                    caption: new_text,
                    parse_mode: 'MarkdownV2',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                ctx.editMessageText(new_text, {
                    parse_mode: 'MarkdownV2',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }
        }
    } else if (command == 'material') {
        let webinar = data.webinars.find(w => w.uid == args[0]);
        if (!webinar) {
            ctx.deleteMessage();
            let reply_text =
                '‚ùå –í–µ–±–∏–Ω–∞—Ä —É–¥–∞–ª—ë–Ω';
            ctx.reply(reply_text);
        } else {
            let material = webinar.materials[args[1]];
            if (!material) {
                ctx.deleteMessage();
                let reply_text =
                    '‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª—ë–Ω';
                ctx.reply(reply_text);
            } else {
                let new_text =
                    '*' + md(material.name) + '*\n' +
                    (material.description ? '\n' + md(material.description) : '');
                if (webinar.image) {
                    ctx.editMessageMedia({
                        type: material.type,
                        media: material.media,
                        caption: new_text,
                    }, {
                        parse_mode: 'MarkdownV2',
                        reply_markup: {
                            inline_keyboard: [
                                [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back:webinar:' + webinar.uid } ]
                            ]
                        }
                    });
                } else {
                    ctx.deleteMessage();
                    if (material.type == 'photo') {
                        ctx.replyWithPhoto(material.media, {
                            caption: new_text,
                            parse_mode: 'MarkdownV2',
                            reply_markup: {
                                inline_keyboard: [
                                    [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back:webinar:' + webinar.uid } ]
                                ]
                            }
                        });
                    } else if (material.type == 'video') {
                        ctx.replyWithVideo(material.media, {
                            caption: new_text,
                            parse_mode: 'MarkdownV2',
                            reply_markup: {
                                inline_keyboard: [
                                    [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back:webinar:' + webinar.uid } ]
                                ]
                            }
                        });
                    } else if (material.type == 'document') {
                        ctx.replyWithDocument(material.media, {
                            caption: new_text,
                            parse_mode: 'MarkdownV2',
                            reply_markup: {
                                inline_keyboard: [
                                    [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back:webinar:' + webinar.uid } ]
                                ]
                            }
                        });
                    }
                }
            }
        }
    }
}

module.exports = handle_callback;